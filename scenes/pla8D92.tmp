[gd_scene load_steps=4 format=3 uid="uid://dnimlbn78cq4q"]

[sub_resource type="GDScript" id="GDScript_nps56"]
script/source = "extends CharacterBody3D

@onready var head = $head
@onready var camera = $head/Camera3D

@export var jump_velocity = 4.5
@export var speed = 6.0
@export var mouse_sens = 0.0025

@export var bob_freq = 2.5
@export var bob_amp = 0.05
var bob_period = 0.0

@export var coyote_time = 0.3
var coyote_timer = 0.0
var has_jumped = false

# Get the gravity from the project settings to be synced with RigidBody nodes.
var gravity = ProjectSettings.get_setting(\"physics/3d/default_gravity\")

func _ready():
	Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)

func _unhandled_input(event):
	if event is InputEventMouseMotion:
		head.rotate_y(-event.relative.x * mouse_sens)
		camera.rotate_x(-event.relative.y * mouse_sens)
		camera.rotation.x = clamp(camera.rotation.x, deg_to_rad(-70), deg_to_rad(80))

func _physics_process(delta):
	
	if not is_on_floor():
		# Add the gravity.
		velocity.y -= gravity * delta
	
	# Handle Jump.
	_handle_jump(delta)
	
	_handle_movement(delta)
	
	_handle_head_bob(delta)

	move_and_slide()
	
func _handle_movement(delta):
	# Get the input direction and handle the movement/deceleration.
	var input_dir = Input.get_vector(\"left\", \"right\", \"up\", \"down\")
	var direction = (head.transform.basis * Vector3(input_dir.x, 0, input_dir.y)).normalized()
	
	if is_on_floor():
		if direction:
			velocity.x = direction.x * speed
			velocity.z = direction.z * speed
		else:
			velocity.x = lerp(velocity.x, direction.x * speed, delta * 7.0)
			velocity.z = lerp(velocity.z, direction.z * speed, delta * 7.0)
	else: 
		velocity.x = lerp(velocity.x, direction.x * speed, delta * 3.0)
		velocity.z = lerp(velocity.z, direction.z * speed, delta * 3.0)
	
func _handle_jump(delta):
	if is_on_floor():
		coyote_timer = 0.0
		has_jumped = false
	else:
		coyote_timer += delta
		
	if Input.is_action_just_pressed(\"jump\") and coyote_timer < coyote_time and not has_jumped:
		velocity.y = jump_velocity
		has_jumped = true
	
func _handle_head_bob(delta):
	if is_on_floor():
		bob_period += delta * velocity.length()

	var pos = Vector3.ZERO
	pos.y = sin(bob_period * bob_freq) * bob_amp
#	pos.x = cos(bob_period * bob_freq / 2) * bob_amp
	camera.transform.origin = pos

func _handle_strafe(input_dir):
	camera.rotation.z = lerp_angle(camera.rotation.z, 0, 0.2);

	if is_on_floor() and input_dir.x != 0:
		camera.rotation.z = lerp_angle(camera.rotation.z, deg_to_rad(input_dir.x * 3), 0.2);
"

[sub_resource type="CapsuleMesh" id="CapsuleMesh_7kq1m"]

[sub_resource type="ConvexPolygonShape3D" id="ConvexPolygonShape3D_2y4o1"]
points = PackedVector3Array(-0.125207, -0.532801, -0.480507, 0.0227831, 0.47607, 0.498884, 0.169713, 0.559144, 0.464172, 0.231051, -0.803591, 0.320455, 0.40741, 0.651043, -0.243523, -0.482789, 0.594843, 0.0822132, -0.362868, -0.682312, 0.289697, 0.469044, -0.654529, -0.0662713, -0.127444, 0.842701, -0.338103, -0.393435, -0.683942, -0.244717, 0.438255, 0.623309, 0.200849, 0.0841477, 0.977454, 0.114795, -0.0682023, -0.976458, -0.12927, 0.20055, -0.563129, -0.451454, -0.185527, 0.595453, -0.453475, -0.273363, 0.592268, 0.407754, -0.00693649, -0.476823, 0.49966, 0.375821, -0.588614, 0.316955, 0.111579, 0.563059, -0.481177, -0.41725, 0.527866, -0.270497, -0.484546, -0.596972, -0.0665097, -0.279747, 0.908561, 0.0533361, -0.250197, -0.880712, 0.205319, 0.263647, -0.902771, -0.127394, 0.293368, 0.871526, -0.157196, 0.373412, -0.526319, -0.328246, 0.499663, 0.476641, -0.00688856, 0.0531056, 0.875001, 0.324703, -0.154543, -0.590854, 0.465879, -0.0972799, -0.782358, -0.398188, -0.387649, -0.498171, 0.31565, -0.30068, -0.587995, -0.388901)

[node name="player" type="CharacterBody3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.29126, 0)
script = SubResource("GDScript_nps56")

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
mesh = SubResource("CapsuleMesh_7kq1m")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
shape = SubResource("ConvexPolygonShape3D_2y4o1")

[node name="head" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.44406, 0)

[node name="Camera3D" type="Camera3D" parent="head"]
